name: CI

on: [push]

jobs:
  foundry-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Install forge-std
        run: |
          forge install foundry-rs/forge-std --no-commit
          forge remappings > remappings.txt
      - name: Run non-Kontrol tests
        run: |
          forge test --no-match-path "src/test/kontrol/*" -vvv
      - name: Run snapshot without Kontrol tests
        run: forge snapshot --no-match-path "src/test/kontrol/*"

  formal-verification:
    runs-on: ubuntu-latest
    needs: foundry-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gcc git g++ cmake maven openjdk-11-jdk flex z3 libz3-dev libsecp256k1-dev

      - name: Debug and Install KUP
        run: |
          # Debug: Show environment
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "Python version: $(python3 --version)"
          
          # Install kup with debug output
          echo "Installing kup..."
          curl -sSL https://kframework.org/install -o install.sh
          
          # Debug: Show install script
          echo "Install script content:"
          cat install.sh
          
          # Run installation with debug output
          bash -x install.sh
          
          # Debug: Check kup installation
          echo "Checking kup installation..."
          ls -la $HOME/.kup || echo ".kup directory not found"
          ls -la $HOME/.kup/bin || echo ".kup/bin directory not found"
          
          # Add to PATH
          export PATH="$HOME/.kup/bin:$PATH"
          echo "$HOME/.kup/bin" >> $GITHUB_PATH
          
          # Verify kup installation
          echo "Verifying kup command..."
          which kup || echo "kup not found in PATH"
          kup --version || echo "kup version check failed"

      - name: Install Kontrol via KUP
        env:
          REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
        run: |
          # Configure git authentication
          git config --global url."https://${REPOSITORY_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          
          # Set up netrc for authentication
          echo "machine github.com login ${REPOSITORY_TOKEN}" > $HOME/.netrc
          chmod 600 $HOME/.netrc
          
          # Debug: Show git config
          echo "Git config:"
          git config --global --list | grep -v "url"
          
          # Install Kontrol with debug output
          echo "Installing Kontrol via kup..."
          export GITHUB_TOKEN=$REPOSITORY_TOKEN
          kup install kontrol --verbose || {
            echo "kup install kontrol failed"
            echo "kup debug output:"
            kup --debug install kontrol
            exit 1
          }
          
          # Verify Kontrol installation
          echo "Verifying Kontrol installation..."
          which kontrol || { echo "kontrol not found in PATH"; exit 1; }
          kontrol --version || { echo "Kontrol failed to run"; exit 1; }

      - name: Run Formal Verification with Kontrol
        run: |
          mkdir -p verification-results
          verified_count=0
          
          for spec in src/test/kontrol/*.k; do
            if [ -f "$spec" ]; then
              echo "Verifying $(basename "$spec")..."
              
              if kontrol prove "$spec" \
                 --contract-dir ./src/contracts \
                 --output-dir ./verification-results \
                 --verbose; then
                echo "✓ Verification successful for $spec"
                ((verified_count++))
              else
                echo "✗ Verification failed for $spec"
                cat "./verification-results/$(basename "$spec" .k).out" 2>/dev/null || echo "No output file found"
                exit 1
              fi
            fi
          done
          
          if [ $verified_count -eq 0 ]; then
            echo "No specification files found to verify"
            exit 1
          else
            echo "Successfully verified $verified_count specification(s)"
          fi