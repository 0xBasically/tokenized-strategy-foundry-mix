name: CI

on: [push]

env:
  NIX_INSTALLABLE_PACKAGE: github:runtimeverification/kup#kup

jobs:
  foundry-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Install forge-std
        run: |
          forge install foundry-rs/forge-std --no-commit
          forge remappings > remappings.txt
      - name: Run non-Kontrol tests
        run: |
          forge test --no-match-path "src/test/kontrol/*" -vvv
      - name: Run snapshot without Kontrol tests
        run: forge snapshot --no-match-path "src/test/kontrol/*"

  setup-verification:
    needs: foundry-test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install forge-std and build
        run: |
          forge install foundry-rs/forge-std --no-commit
          forge build --build-info --force
          forge remappings > remappings.txt

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gcc git g++ cmake maven openjdk-11-jdk flex \
            z3 libz3-dev libsecp256k1-dev python3 python3-pip build-essential

      # Install Nix
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE= k-framework-binary.cachix.org-1:pJedQ8iG19BW3v/DMMmiRVtwRBGO3fyMv2Ws0OpBADs=
            substituters = https://cache.nixos.org https://k-framework.cachix.org

      # Install Cachix
      - uses: cachix/cachix-action@v12
        with:
          name: k-framework
          extraPullNames: k-framework-binary

      - name: Install KUP and Kontrol
        env:
          REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
        run: |
          git config --global url."https://${REPOSITORY_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          
          echo "Installing kup..."
          GC_DONT_GC=1 nix profile install github:runtimeverification/kup#kup \
            --option extra-substituters 'https://k-framework.cachix.org' \
            --option extra-trusted-public-keys 'k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE=' \
            --experimental-features 'nix-command flakes'
          
          export PATH="$HOME/.nix-profile/bin:$PATH"
          echo "$HOME/.nix-profile/bin" >> $GITHUB_PATH
          
          echo "Installing Kontrol..."
          GITHUB_TOKEN=$REPOSITORY_TOKEN kup install kontrol
          
          echo "Verifying Kontrol installation..."
          which kontrol || { echo "kontrol not found in PATH"; exit 1; }
          kontrol version || { echo "kontrol not working properly"; exit 1; }

      - name: Verify Kontrol Environment
        run: |
          echo "Checking Kontrol environment..."
          
          # Check for required directories
          for dir in .build .kontrol "out/proofs"; do
            if [ ! -d "$dir" ]; then
              echo "Creating $dir..."
              mkdir -p "$dir"
            fi
            echo "Contents of $dir:"
            ls -la "$dir"
          done
          
          # Test Kontrol functionality
          echo "Testing Kontrol..."
          kontrol version
          kontrol list
          
          # Check proof directory permissions
          echo "Checking permissions..."
          stat out/proofs
          
          # Verify forge build info
          echo "Checking forge build..."
          test -d out/proofs || echo "out/proofs missing"
          forge build --build-info --force

      - name: Cache Kontrol Build
        uses: actions/cache@v3
        with:
          path: |
            .build
            .kontrol
            out/proofs
          key: kontrol-cache-${{ github.sha }}
          restore-keys: |
            kontrol-cache-

      - name: Run Setup Verification
        run: |
          mkdir -p verification-results
          echo "Building Kontrol project..."
          kontrol build --verbose
          
          echo "Running setup verification..."
          kontrol prove --config-profile setup --verbose

      - name: Upload Setup Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: setup-verification-results
          path: |
            verification-results/
          retention-days: 5
  repo-token-tests:
      needs: setup-verification
      runs-on: ubuntu-latest
      timeout-minutes: 350
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            submodules: recursive

        - name: Install Foundry
          uses: foundry-rs/foundry-toolchain@v1
          with:
            version: nightly

        - name: Install forge-std and build
          run: |
            forge install foundry-rs/forge-std --no-commit
            forge build --build-info --force
            forge remappings > remappings.txt

        - name: Install System Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y curl gcc git g++ cmake maven openjdk-11-jdk flex \
              z3 libz3-dev libsecp256k1-dev python3 python3-pip build-essential

        - uses: DeterminateSystems/nix-installer-action@main
          with:
            extra-conf: |
              trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE= k-framework-binary.cachix.org-1:pJedQ8iG19BW3v/DMMmiRVtwRBGO3fyMv2Ws0OpBADs=
              substituters = https://cache.nixos.org https://k-framework.cachix.org

        - uses: cachix/cachix-action@v12
          with:
            name: k-framework
            extraPullNames: k-framework-binary

        - name: Install KUP and Kontrol
          env:
            REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
          run: |
            git config --global url."https://${REPOSITORY_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            
            echo "Installing kup..."
            GC_DONT_GC=1 nix profile install github:runtimeverification/kup#kup \
              --option extra-substituters 'https://k-framework.cachix.org' \
              --option extra-trusted-public-keys 'k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE=' \
              --experimental-features 'nix-command flakes'
            
            export PATH="$HOME/.nix-profile/bin:$PATH"
            echo "$HOME/.nix-profile/bin" >> $GITHUB_PATH
            
            echo "Installing Kontrol..."
            GITHUB_TOKEN=$REPOSITORY_TOKEN kup install kontrol
            
            echo "Verifying Kontrol installation..."
            which kontrol || { echo "kontrol not found in PATH"; exit 1; }
            kontrol version || { echo "kontrol not working properly"; exit 1; }

        - name: Configure System Resources
          run: |
            # Show available memory
            echo "Available memory:"
            free -h
            
            # Clear system cache
            sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
            
            # Configure swap
            sudo fallocate -l 8G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            
            echo "Memory after swap configuration:"
            free -h

        - name: Cache Kontrol Build
          uses: actions/cache@v3
          with:
            path: |
              .build
              .kontrol
              out/proofs
            key: kontrol-cache-${{ github.sha }}
            restore-keys: |
              kontrol-cache-

        - name: Prepare Verification Environment
          run: |
            mkdir -p .build .kontrol "out/proofs"
            chmod -R 755 .build .kontrol "out/proofs"
            rm -rf out/proofs/*
            
            # Clean any previous build artifacts
            rm -rf out/kompiled
            
            if [ -d ".build" ] && [ -d ".kontrol" ]; then
              echo "Restored Kontrol state from cache"
              ls -la .build
              ls -la .kontrol
            else
              echo "No cached state found, initializing..."
              kontrol build --verbose
            fi

        - name: Run RepoToken Tests with Memory Management
          run: |
            mkdir -p verification-results
            
            # Function to run verification with memory monitoring
            run_verification() {
              while true; do
                free -h >> verification-results/memory-usage.log
                sleep 30
              done &
              MONITOR_PID=$!
              
              # Ensure proofs directory exists and is clean
              mkdir -p out/proofs
              rm -rf out/proofs/*
              
              # Build project first
              echo "Building Kontrol project..."
              kontrol build --verbose
              
              # List of test functions to run separately
              TESTS=(
                "testInsertSortedNewToken()"
                "testInsertSortedDuplicateToken(address)"
                "testRemoveAndRedeemMaturedTokens()"
              )
              
              # Run each test separately
              for test in "${TESTS[@]}"; do
                echo "Running test: $test"
                
                # Clean proof directory for each test
                rm -rf "out/proofs/src%test%kontrol%RepoTokenListInvariantsTest.$test"*
                
                # Run individual test
                kontrol prove \
                  --verbose \
                  --debug \
                  --include "src%test%kontrol%RepoTokenListInvariantsTest.$test" \
                  --config-profile tests \
                  --build-dir ./out \
                  --proofs-dir ./out/proofs \
                  2>&1 | tee -a verification-results/verification.log
                
                TEST_RESULT=$?
                if [ $TEST_RESULT -ne 0 ]; then
                  echo "Test $test failed with exit code $TEST_RESULT"
                  
                  # Debug information
                  echo "Contents of proof directory:"
                  ls -la out/proofs
                  echo "Contents of build directory:"
                  ls -la out
                  
                  return $TEST_RESULT
                fi
                
                # Clear caches between tests
                sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
                sleep 10
              done
              
              kill $MONITOR_PID
              return 0
            }

        - name: Analyze Verification Results
          if: always()
          run: |
            echo "Analyzing verification results..."
            
            if [ -f "verification-results/verification.log" ]; then
              echo "Last 50 lines of verification log:"
              tail -n 50 verification-results/verification.log
              
              echo "Memory usage during verification:"
              cat verification-results/memory-usage.log
              
              if grep -q "Out of memory" verification-results/verification.log; then
                echo "Out of memory condition detected"
              fi
            fi

        - name: Upload Results
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: repo-token-verification-results
            path: |
              verification-results/
              out/proofs/
              .build/
              .kontrol/
            retention-days: 5
  term-auction-tests:
      needs: setup-verification
      runs-on: ubuntu-latest
      timeout-minutes: 350
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            submodules: recursive

        - name: Install Foundry
          uses: foundry-rs/foundry-toolchain@v1
          with:
            version: nightly

        - name: Install forge-std and build
          run: |
            forge install foundry-rs/forge-std --no-commit
            forge build --build-info --force
            forge remappings > remappings.txt

        - name: Install System Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y curl gcc git g++ cmake maven openjdk-11-jdk flex \
              z3 libz3-dev libsecp256k1-dev python3 python3-pip build-essential

        - uses: DeterminateSystems/nix-installer-action@main
          with:
            extra-conf: |
              trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE= k-framework-binary.cachix.org-1:pJedQ8iG19BW3v/DMMmiRVtwRBGO3fyMv2Ws0OpBADs=
              substituters = https://cache.nixos.org https://k-framework.cachix.org

        - uses: cachix/cachix-action@v12
          with:
            name: k-framework
            extraPullNames: k-framework-binary

        - name: Install KUP and Kontrol
          env:
            REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
          run: |
            git config --global url."https://${REPOSITORY_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            
            echo "Installing kup..."
            GC_DONT_GC=1 nix profile install github:runtimeverification/kup#kup \
              --option extra-substituters 'https://k-framework.cachix.org' \
              --option extra-trusted-public-keys 'k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE=' \
              --experimental-features 'nix-command flakes'
            
            export PATH="$HOME/.nix-profile/bin:$PATH"
            echo "$HOME/.nix-profile/bin" >> $GITHUB_PATH
            
            echo "Installing Kontrol..."
            GITHUB_TOKEN=$REPOSITORY_TOKEN kup install kontrol
            
            echo "Verifying Kontrol installation..."
            which kontrol || { echo "kontrol not found in PATH"; exit 1; }
            kontrol version || { echo "kontrol not working properly"; exit 1; }

        - name: Configure System Resources
          run: |
            echo "Available memory:"
            free -h
            
            sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
            
            sudo fallocate -l 8G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            
            echo "Memory after swap configuration:"
            free -h

        - name: Cache Kontrol Build
          uses: actions/cache@v3
          with:
            path: |
              .build
              .kontrol
              out/proofs
            key: kontrol-cache-${{ github.sha }}
            restore-keys: |
              kontrol-cache-

        - name: Prepare Verification Environment
          run: |
            # Create necessary directories
            mkdir -p .build .kontrol "out/proofs"
            chmod -R 755 .build .kontrol "out/proofs"
            
            # Clean stale files
            rm -rf out/proofs/*
            rm -rf out/kompiled
            
            if [ -d ".build" ] && [ -d ".kontrol" ]; then
              echo "Restored Kontrol state from cache"
              ls -la .build
              ls -la .kontrol
            else
              echo "No cached state found, initializing..."
              kontrol build --verbose
            fi

        - name: Run TermAuction Tests with Memory Management
          run: |
            mkdir -p verification-results
            
            run_verification() {
              while true; do
                free -h >> verification-results/memory-usage.log
                sleep 30
              done &
              MONITOR_PID=$!
              
              # Ensure proofs directory exists and is clean
              mkdir -p out/proofs
              rm -rf out/proofs/*
              
              # Build project first
              echo "Building Kontrol project..."
              kontrol build --verbose
              
              TESTS=(
                "testInsertPendingNewOffer(bytes32,address)"
                "testInsertPendingDuplicateOffer(bytes32,(address,uint256,address,address),address)"
                "testRemoveCompleted(address)"
              )
              
              for test in "${TESTS[@]}"; do
                echo "Running test: $test"
                
                # Clean proof directory for each test
                rm -rf "out/proofs/src%test%kontrol%TermAuctionListInvariantsTest.$test"*
                
                kontrol prove \
                  --verbose \
                  --debug \
                  --include "src%test%kontrol%TermAuctionListInvariantsTest.$test" \
                  --config-profile tests \
                  --build-dir ./out \
                  --proofs-dir ./out/proofs \
                  2>&1 | tee -a verification-results/verification.log
                
                TEST_RESULT=$?
                if [ $TEST_RESULT -ne 0 ]; then
                  echo "Test $test failed with exit code $TEST_RESULT"
                  
                  # Debug information
                  echo "Contents of proof directory:"
                  ls -la out/proofs
                  echo "Contents of build directory:"
                  ls -la out
                  
                  return $TEST_RESULT
                fi
                
                sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
                sleep 10
              done
              
              kill $MONITOR_PID
              return 0
            }

        - name: Analyze Verification Results
          if: always()
          run: |
            echo "Analyzing verification results..."
            
            if [ -f "verification-results/verification.log" ]; then
              echo "Last 50 lines of verification log:"
              tail -n 50 verification-results/verification.log
              
              echo "Memory usage during verification:"
              cat verification-results/memory-usage.log
              
              if grep -q "Out of memory" verification-results/verification.log; then
                echo "Out of memory condition detected"
              fi
            fi

        - name: Upload Results
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: term-auction-verification-results
            path: |
              verification-results/
              out/proofs/
              .build/
              .kontrol/
            retention-days: 5

  results-summary:
    needs: [setup-verification, repo-token-tests, term-auction-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v3
        with:
          path: all-results

      - name: Generate Summary
        run: |
          echo "# Kontrol Verification Summary" > summary.md
          echo "Generated at: $(date)" >> summary.md
          echo "" >> summary.md
          
          # Function to process results
          process_results() {
            local dir="$1"
            local section="$2"
            
            echo "## $section" >> summary.md
            echo "\`\`\`" >> summary.md
            
            if [ -d "$dir" ]; then
              # Check verification log
              if [ -f "$dir/verification.log" ]; then
                echo "### Verification Output" >> summary.md
                tail -n 50 "$dir/verification.log" >> summary.md
              fi
              
              # Check memory usage
              if [ -f "$dir/memory-usage.log" ]; then
                echo "### Memory Usage" >> summary.md
                tail -n 10 "$dir/memory-usage.log" >> summary.md
              fi
              
              # Check for specific errors
              if grep -q "Out of memory" "$dir"/*.log 2>/dev/null; then
                echo "⚠️ Out of Memory conditions detected" >> summary.md
              fi
              
              # Add any successful proofs
              if grep -q "PROOF PASSED" "$dir"/*.log 2>/dev/null; then
                echo "✅ Successful proofs detected" >> summary.md
                grep "PROOF PASSED" "$dir"/*.log >> summary.md
              fi
            else
              echo "No results found for $section" >> summary.md
            fi
            
            echo "\`\`\`" >> summary.md
            echo "" >> summary.md
          }
          
          process_results "all-results/setup-verification-results" "Setup Verification"
          process_results "all-results/repo-token-verification-results" "RepoToken Tests"
          process_results "all-results/term-auction-verification-results" "TermAuction Tests"
          
          # Add overall status
          echo "## Overall Status" >> summary.md
          echo "- Setup: $(test -d all-results/setup-verification-results && echo '✅' || echo '❌')" >> summary.md
          echo "- RepoToken: $(test -d all-results/repo-token-verification-results && echo '✅' || echo '❌')" >> summary.md
          echo "- TermAuction: $(test -d all-results/term-auction-verification-results && echo '✅' || echo '❌')" >> summary.md

      - name: Upload Summary
        uses: actions/upload-artifact@v3
        with:
          name: verification-summary
          path: summary.md
          retention-days: 5